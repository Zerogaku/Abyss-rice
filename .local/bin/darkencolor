#!/bin/bash

# Check if an argument is provided, and use it as the hex color
if [ -n "$1" ]; then
  hex_color="$1"
else
  echo "Usage: $0 <hex_color>"
  exit 1
fi

# Function to darken a hex color
darken_color() {
  local hex="$1"
  local percent="$2"

  # Remove the leading '#' if present
  hex="${hex#"#"}"

  # Convert the hex color to RGB
  r=$((16#${hex:0:2}))
  g=$((16#${hex:2:2}))
  b=$((16#${hex:4:2}))

  # Calculate the new RGB values after darkening
  r=$((r * (100 - percent) / 100))
  g=$((g * (100 - percent) / 100))
  b=$((b * (100 - percent) / 100))

  # Ensure the values are within the valid range (0-255)
  r=$((r < 0 ? 0 : r))
  g=$((g < 0 ? 0 : g))
  b=$((b < 0 ? 0 : b))
  r=$((r > 255 ? 255 : r))
  g=$((g > 255 ? 255 : g))
  b=$((b > 255 ? 255 : b))

  # Convert the new RGB values back to hex
  printf "#%02X%02X%02X" "$r" "$g" "$b"
}

# Darken the input hex color by 20% (adjust as needed)
darkened_color=$(darken_color "$hex_color" 25)

# Output the darkened color
echo $darkened_color
